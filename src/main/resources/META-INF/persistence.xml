<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
	<persistence-unit name="Simplest" transaction-type="RESOURCE_LOCAL">
		<!-- OpenJPA persistence provider -->
		<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
		<!-- JNDI name of the datasource -->
        <jta-data-source>jdbc/jpaDemoDB</jta-data-source>

		<!-- JPA entities must be registered here -->
		<class>org.meri.jpa.simplest.entities.Person</class>
                
		<!-- other properties -->
		<properties>
			<!-- Do not use in production, this will generate a lot of output. -->
			 <property name="openjpa.Log" value="SQL=TRACE"/>  
		</properties>

	</persistence-unit>

	<persistence-unit name="Relationships" transaction-type="RESOURCE_LOCAL">
		<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
        <jta-data-source>jdbc/jpaDemoDB</jta-data-source>

		<!-- JPA entities must be registered here -->
		<class>org.meri.jpa.relationships.entities.Person</class>
		<class>org.meri.jpa.relationships.entities.FacebookAccount</class>
		<class>org.meri.jpa.relationships.entities.TwitterAccount</class>
		<class>org.meri.jpa.relationships.entities.UnidirectionalOneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.UnidirectionalOneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetoone.OneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.onetoone.OneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetoone.LazyOneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.onetoone.LazyOneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetoone.ColumnOneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.onetoone.ColumnOneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetoone.TableOneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.onetoone.TableOneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetoone.PrimaryOneToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.onetoone.PrimaryOneToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CollectionOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CollectionInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.MapOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.MapInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CustomColumnCollectionOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CustomColumnCollectionInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CustomColumnMapOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.CustomColumnMapInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.OrderedOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.OrderedInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.LazyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.LazyInverse</class>
		<class>org.meri.jpa.relationships.entities.manytoone.UnidirectionalManyToOneOwner</class>
		<class>org.meri.jpa.relationships.entities.manytoone.UnidirectionalManyToOneInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany.OneToManyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany.OneToManyInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany.MapOneToManyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany.MapOneToManyInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany.ColumnOneToManyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany.ColumnOneToManyInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany.TableOneToManyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany.TableOneToManyInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany.OrphanOneToManyOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany.OrphanOneToManyInverse</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.OrphanOwner</class>
		<class>org.meri.jpa.relationships.entities.onetomany_manytoone.OrphanInverse</class>
		<class>org.meri.jpa.relationships.entities.manytomany.MtmCollectionOwner</class>
		<class>org.meri.jpa.relationships.entities.manytomany.MtmCollectionInverse</class>
		<class>org.meri.jpa.relationships.entities.manytomany.MtmOwner</class>
		<class>org.meri.jpa.relationships.entities.manytomany.MtmInverse</class>
		<class>org.meri.jpa.relationships.entities.manytomany.TableMtmOwner</class>
		<class>org.meri.jpa.relationships.entities.manytomany.TableMtmInverse</class>
		<class>org.meri.jpa.relationships.entities.manytomany.OrderedMtmOwner</class>
		<class>org.meri.jpa.relationships.entities.manytomany.OrderedMtmInverse</class>
		
		<!-- other properties -->
		<properties>
			<!-- Do not use in production, this will generate a lot of output. -->
			<property name="openjpa.Log" value="SQL=TRACE"/>
			<!-- load foreign key information from the database	  -->
			<!-- workaround OpenJPA issue https://issues.apache.org/jira/browse/OPENJPA-435  -->
			<property name="openjpa.jdbc.SchemaFactory" value="native(ForeignKeys=true)"/> 
		</properties>
                
	</persistence-unit>

	<persistence-unit name="Cascading" transaction-type="RESOURCE_LOCAL">
		<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>
        <jta-data-source>jdbc/jpaDemoDB</jta-data-source>

		<!-- JPA entities must be registered here -->
		<class>org.meri.jpa.cascading.entities.CascadeOneToOneOwner</class>
		<class>org.meri.jpa.cascading.entities.CascadeOneToOneInverse</class>
		<class>org.meri.jpa.cascading.entities.CascadePersistDemo</class>
		<class>org.meri.jpa.cascading.entities.OneToOneOwner</class>
		<class>org.meri.jpa.cascading.entities.OneToOneInverse</class>
		<class>org.meri.jpa.cascading.entities.CascadeFirst</class>
		<class>org.meri.jpa.cascading.entities.CascadeSecond</class>
		<class>org.meri.jpa.cascading.entities.CascadeThird</class>
		<class>org.meri.jpa.cascading.entities.CascadeFourth</class>
		<class>org.meri.jpa.cascading.entities.CascadeRemoveFirst</class>
		<class>org.meri.jpa.cascading.entities.CascadeRemoveSecond</class>
		<class>org.meri.jpa.cascading.entities.CascadeRemoveThird</class>
		
		<!-- other properties -->
		<properties>
			<!-- Do not use in production, this will generate a lot of output. -->
			<property name="openjpa.Log" value="SQL=TRACE"/>
			<!-- load foreign key information from the database	  -->
			<!-- workaround OpenJPA issue https://issues.apache.org/jira/browse/OPENJPA-435  -->
			<property name="openjpa.jdbc.SchemaFactory" value="native(ForeignKeys=true)"/> 
		</properties>
                
	</persistence-unit>
</persistence>
